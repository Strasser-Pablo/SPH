#include "voisin_iterator.h"
#include "particles.h"
Voisin::Voisin(){
}
Voisin::Voisin(list<Particles*> vect) : m_vect(vect){
}

list<Particles*> Voisin::GetParticlesVect() const {
	return m_vect;
}

Voisin_Iterator Voisin::begin(){
	if(m_vect.empty()) {
		//empty return the end.
		return Voisin_Iterator(m_vect,m_vect.end());
	}
	iterator_particles it_beg=m_vect.begin();
	bool b=false;
	//not empty find first non empty particles
	while(it_beg!=m_vect.end()) {
		if(!(*it_beg)->empty()) {
			b=true;
			break;
		}
		++it_beg;
	}
	if(b) {
		//first non empty found
		return Voisin_Iterator(m_vect,it_beg,(*it_beg)->begin());
	}
	//case in witch it_beg is the end, cannot define second member.
	return Voisin_Iterator(m_vect,it_beg);
}
Voisin_Iterator Voisin::end(){
	return Voisin_Iterator(m_vect,m_vect.end());
}

list<Particles*>::iterator Voisin::begin_particles(){
	return m_vect.begin();
}



list<Particles*>::iterator Voisin::end_particles(){
	return m_vect.end();
}


void Voisin::erase(list<Particles*>::iterator & it){
	m_vect.erase(it);
}


