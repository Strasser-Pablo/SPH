#include "key.h"
#include <iostream>
Key<2>::Key(int x, int y):m_x(x),m_y(y)
{

}

list<Key<2> > Key<2>::GetNeighbour()
{
list<Key<2> > list;

for(int i=m_x-1;i<=m_x+1;i++){
 for(int j=m_y-1;j<=m_y+1;j++){
  list.push_front(Key< 2  >(i,j)); 
 }
}
return list;
}

Key< 3  >::Key(int x, int y, int z):m_x(x),m_y(y),m_z(z)
{

}

list< Key< 3 > > Key< 3  >::GetNeighbour()
{
list<Key<3> > list;

for(int i=m_x-1;i<=m_x+1;i++){
 for(int j=m_y-1;j<=m_y+1;j++){
    for(int k=m_z-1;k<=m_z+1;k++){
  list.push_front(Key< 3  >(i,j,k)); 
 }
}
}
return list;
}

bool Key<2>::operator<(const Key<2> A) const{
  if(m_x<A.m_x){
    return true;
  }
  else if(m_x>A.m_x){
   return false; 
  }
    if(m_y<A.m_y){
    return true;
  }
  else if(m_y>A.m_y){
   return false; 
  }
  
 
  return false;
}

bool Key<3>::operator<(const Key<3> A) const{


  
  if(m_x<A.m_x){
    return true;
  }
  else if(m_x>A.m_x){
   return false; 
  }
    if(m_y<A.m_y){
    return true;
  }
  else if(m_y>A.m_y){
   return false; 
  }
  
      if(m_z<A.m_z){
    return true;
  }
  else if(m_z>A.m_z){
   return false; 
  }
  return false;
}


void Key< 2  >::Dump() const
{
cout<<"Key 2d "<<m_x<<" "<<m_y<<endl;
}

void Key< 3  >::Dump() const
{
cout<<"Key 3d "<<m_x<<" "<<m_y<<" "<<m_z<<endl;
}